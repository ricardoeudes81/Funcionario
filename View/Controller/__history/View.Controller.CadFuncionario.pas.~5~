unit View.Controller.CadFuncionario;

interface

uses
  System.Generics.Collections, System.Classes, unControllerFuncionario,
  unControllerDependente, Dependente, Funcionario;

type

  IControllerCadFuncionario = interface
  ['{391B80CD-D5C4-4537-BD09-F9198C40DBEA}']
    function ExcluirCadastroFuncionario(AIdFuncionario: Integer): IControllerCadFuncionario;
    function ExcluirCadastroDependentes(ALista: TObjectList<TDependente>): IControllerCadFuncionario;
    function SalvarCadastroFuncionario(var AFuncionario: TFuncionario): IControllerCadFuncionario;
    function SalvarCadastroDependentes(AFuncionario: TFuncionario): IControllerCadFuncionario;
  end;

  TControllerCadFuncionario = class(TInterfacedPersistent, IControllerCadFuncionario)
  public
    function ExcluirCadastroFuncionario(AIdFuncionario: Integer): IControllerCadFuncionario;
    function ExcluirCadastroDependentes(ALista: TObjectList<TDependente>): IControllerCadFuncionario;
    function SalvarCadastroFuncionario(var AFuncionario: TFuncionario): IControllerCadFuncionario;
    function SalvarCadastroDependentes(AFuncionario: TFuncionario): IControllerCadFuncionario;
    class function New: IControllerCadFuncionario;
  end;

implementation

{ TControllerCadFuncionario }

function TControllerCadFuncionario.ExcluirCadastroDependentes(
  ALista: TObjectList<TDependente>): IControllerCadFuncionario;
begin
  Result := Self;
  TControllerDependente.New.Remover(ALista);
end;

function TControllerCadFuncionario.ExcluirCadastroFuncionario(
  AIdFuncionario: Integer): IControllerCadFuncionario;
begin
  Result := Self;
  var ControllerFunc := TControllerFuncionario.New;
  var objFuncionario := ControllerFunc.ObterFuncionario(AIdFuncionario);
  ControllerFunc.Remover(objFuncionario);
end;

class function TControllerCadFuncionario.New: IControllerCadFuncionario;
begin
  Result := Self.Create;
end;

function TControllerCadFuncionario.SalvarCadastroDependentes(
  AFuncionario: TFuncionario): IControllerCadFuncionario;
begin
  Result := Self;
  var ListaDepedentes := TObjectList<TDependente>.Create;
  try
    ListaDepedentes.Clear;
    for var Dependente in AFuncionario.Dependnetes do
    begin
      var Dep := TDependente.Create;
      Dep.Id := Dependente.Id;
      Dep.IdFuncionario := AFuncionario.Id;
      Dep.Nome := Dependente.Nome;
      Dep.CalculaIR := Dependente.CalculaIR;
      Dep.CalculaINSS := Dependente.CalculaINSS;

      ListaDepedentes.Add(Dep);
    end;
    TControllerDependente.New.Salvar(ListaDepedentes);
  finally
    ListaDepedentes.DisposeOf;
  end;

end;

function TControllerCadFuncionario.SalvarCadastroFuncionario(
  var AFuncionario: TFuncionario): IControllerCadFuncionario;
begin
  Result := Self;
  var IdFuncionario := TControllerFuncionario.New.Salvar(AFuncionario);
  AFuncionario.Id := IdFuncionario;
end;

end.
